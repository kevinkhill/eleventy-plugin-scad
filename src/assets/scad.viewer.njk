<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8"/>
        <title>{{ stlFile }}</title>
        {% threejs_importmap %}
        {% w3_theme_css %}
        <style>
            body {
                margin: 0;
                padding: 0;
                display: flex;
                height: 100vh;
            }

            pre {
                padding: 0.5rem;
                overflow-x: auto;
                background-color: hsla(0, 0%, 100%, 0.1);
            }

            #info {
                width: 40%;
                padding: 0 2rem;
                box-sizing: border-box;
                overflow: auto;
                & h1 {
                    font-size: 3rem;
                    margin: 1rem 0;
                }
                & table tr td:first-child {
                    text-align: right;
                    padding-right: 5px;
                }
            }

            #viewer {
                flex: 1;
                position: relative;
                overflow: hidden;
                background: radial-gradient(120% 80% at 50% 10%, rgba(0, 0, 0, 0.15), #0000 60%), linear-gradient(#000, #184284 70%);
                perspective: 1200px;
            }

            #viewer::after,
            #viewer::before {
                position: absolute;
                z-index: 0;
                /* baseline */
            }

            #viewer canvas {
                position: relative;
                z-index: 100;
                /* ensure STL canvas is above background */
            }

            /* grid floor */
            #viewer::before {
                content: "";
                z-index: 2;
                left: -50%;
                right: -50%;
                bottom: 0;
                height: 100%;
                transform-origin: center bottom;
                transform: rotateX(55deg) translateZ(-100px);
                background: repeating-linear-gradient(to bottom, rgba(255,255,255,.05) 0 40px, rgba(255,255,255,.15) 40px 42px), repeating-linear-gradient(to right, rgba(255,255,255,.05) 0 80px, rgba(255,255,255,.15) 80px 82px);
                background-color: #000;
            }

            /* horizon glow */
            #viewer::after {
                content: "";
                z-index: 1;
                left: 0;
                right: 0;
                bottom: 50%;
                height: 0;
                background: linear-gradient(90deg, transparent, #74f5ff, transparent);
                box-shadow: 0 0 12px 2px #74f5ff, 0 0 28px 6px #74f5ff, 0 0 60px 12px #74f5ff;
            }
        </style>
    </head>

    <body>
        <!-- Details & Code / Left Side -->
        <div id="info">
            <h1>{{ title }}</h1>
            <table>
                <tr>
                    <td>
                        <strong>SCAD</strong>
                    </td>
                    <td>{{ page.inputPath }}</td>
                </tr>
                <tr>
                    <td>
                        <strong>STL</strong>
                    </td>
                    <td>
                        <a href="{{ stlFileUrl }}">{{ stlFile }}</a>
                    </td>
                </tr>
            </table>
            <h4>File Content</h4>
            <pre>{{ content | safe }}</pre>
        </div>

        <!-- Container for STL / Right Side -->
        <div id="viewer"></div>

        <!-- Three.js Renderer -->
        <script type="module">
            import * as THREE from 'three';
            import {OrbitControls} from 'three/addons/controls/OrbitControls.js';
            import {STLLoader} from 'three/addons/loaders/STLLoader.js';
            import GUI from 'https://cdn.jsdelivr.net/npm/lil-gui@0.21/+esm';

            const loader = new STLLoader();
            const container = document.getElementById('viewer');

            let renderer,
                camera,
                spotLight,
                scene,
                controls;

            function setupRenderer() {
                renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setClearColor(0xffffff, 0);
                container.appendChild(renderer.domElement);
            }

            /**
             * @param initialCamera#x,y,z
             */
            function setupCameraAndControls({x, y, z}) {
                const fov = 60;
                const aspect = container.clientWidth / container.clientHeight;
                camera = new THREE.PerspectiveCamera(fov, aspect, 0.1, 1000);
                camera
                    .position
                    .set(x, y, z);
                controls = new OrbitControls(camera, renderer.domElement);
            }

            /**
             * @param initialSpotlight#x,y,z
             */
            function setupScene({x, y, z}) {
                scene = new THREE.Scene();
                // scene.background = new THREE.Color(0x000000);

                const roomLight = new THREE.AmbientLight(0x888888);
                scene.add(roomLight);

                spotLight = new THREE.DirectionalLight(0xffffff, 1);
                spotLight
                    .position
                    .set(x, y, z);
                scene.add(spotLight);
            }

            function renderScene() {
                renderer.render(scene, camera);
            }

            function loadSTL(stlUrl) {
                const material = new THREE.MeshPhongMaterial({color: 0x5588ff});

                loader.load(stlUrl, (geometry) => {
                    const center = new THREE.Vector3();

                    geometry.computeBoundingBox();
                    geometry
                        .boundingBox
                        .getCenter(center)
                        .negate();
                    geometry.translate(center.x, center.y, center.z);

                    const mesh = new THREE.Mesh(geometry, material);

                    scene.add(mesh);
                });
            }

            function setupResizeHandler() {
                window.addEventListener('resize', () => {
                    const {clientHeight, clientWidth} = container;
                    renderer.setSize(clientWidth, clientHeight);
                    camera.aspect = clientWidth / clientHeight;
                    camera.updateProjectionMatrix();
                });
            }

            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderScene();
            }

            function setupGUI(initialState) {
                const {lightPos, cameraPos} = initialState;
                const gui = new GUI();
                gui.onChange(event => {
                    console.log(gui.save());
                })

                const lightingFolder = gui
                    .addFolder("Lighting")
                    .onChange((event) => {
                        spotLight.position.x = event.object.x;
                        spotLight.position.y = event.object.y;
                        spotLight.position.z = event.object.z;
                    });
                lightingFolder.add(lightPos, "x", -500, 500, 1);
                lightingFolder.add(lightPos, "y", -500, 500, 1);
                lightingFolder.add(lightPos, "z", -500, 500, 1);

                const cameraFolder = gui
                    .addFolder("Camera")
                    .onChange((event) => {
                        camera.position.x = event.object.x;
                        camera.position.y = event.object.y;
                        camera.position.z = event.object.z;
                        camera.zoom = event.object.zoom;
                        camera.updateProjectionMatrix();
                    });
                cameraFolder.add(cameraPos, "x", -90, 90, 1);
                cameraFolder.add(cameraPos, "y", -90, 90, 1);
                cameraFolder.add(cameraPos, "z", -90, 90, 1);
                cameraFolder.add(cameraPos, "zoom", 1, 20, .5);
            }

            function init() {
                const initialState = {
                    lightPos: {
                        x: 20,
                        y: 50,
                        z: 100
                    },
                    cameraPos: {
                        x: 30,
                        y: 30,
                        z: 30,
                        zoom: 1
                    }
                };
                setupRenderer();
                setupScene(initialState.lightPos);
                setupCameraAndControls(initialState.cameraPos);
                setupResizeHandler();
                setupGUI(initialState);
                loadSTL({% stl_url page.fileSlug %});
                animate();
            }
            console.log(window.location);
            init();
        </script>
    </body>
</html>
