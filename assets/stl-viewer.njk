<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8"/>
    <title>STL Viewer</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        display: flex;
        height: 100vh;
      }
      #info {
        width: 40%;
        padding: 1rem;
        box-sizing: border-box;
        overflow: auto;
        background: #f7f7f7;
      }
      #viewer {
        flex: 1;
      }
      pre {
        background: #eee;
        padding: 0.5rem;
        overflow-x: auto;
      }
    </style>
    {% threejs_importmap %}
    <script>
      console.log({{ page | dump | safe }});
    </script>
  </head>

  <body>
    <div id="info">
      <h2>Model Information</h2>
      <p>Name: {{ filename }}</p>
      <p>SCAD: {{ inFile }}</p>
      <p>STL: {{ outFile }}</p>
      <p>URL: <a href="{{ outFileUrl }}">{{ outFileUrl }}</a>
      </p>
      <p>Description: STL demo rendered in browser.</p>
      <h3>Sample Code</h3>
      <pre>{{ content | safe }}</pre>
    </div>

    <div id="viewer"></div>
    <script type="module">
      import * as THREE from 'three';
      import {OrbitControls} from 'three/addons/controls/OrbitControls.js';
      import {STLLoader} from 'three/addons/loaders/STLLoader.js';

      const stlUrl = new URL("{{ outFileUrl }}", window.location.origin);

      const {
        Mesh,
        Scene,
        Vector3,
        AmbientLight,
        WebGLRenderer,
        DirectionalLight,
        MeshPhongMaterial,
        PerspectiveCamera
      } = THREE;

      /**
       * Begin STL Viewer
       */
      const container = document.getElementById('viewer');

      const loader = new STLLoader();
      const renderer = new WebGLRenderer({antialias: true});
      const camera = new PerspectiveCamera(60, container.clientWidth / container.clientHeight, 0.1, 1000);

      camera
        .position
        .set(0, 0, 100);
      renderer.setSize(container.clientWidth, container.clientHeight);
      container.appendChild(renderer.domElement);

      const controls = new OrbitControls(camera, renderer.domElement);
      const scene = new Scene();
      scene.background = new THREE.Color(0xffffff);

      const light1 = new DirectionalLight(0xffffff, 1);
      light1
        .position
        .set(1, 1, 1);
      scene.add(light1);
      const light2 = new AmbientLight(0x888888);
      scene.add(light2);

      loader.load(stlUrl, function (geometry) {
        const material = new MeshPhongMaterial({color: 0x5588ff});
        const mesh = new Mesh(geometry, material);
        const center = new Vector3();
        geometry.computeBoundingBox();
        geometry
          .boundingBox
          .getCenter(center)
          .negate();
        geometry.translate(center.x, center.y, center.z);
        scene.add(mesh);
      });

      window.addEventListener('resize', () => {
        camera.aspect = container.clientWidth / container.clientHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(container.clientWidth, container.clientHeight);
      });

      function animate() {
        requestAnimationFrame(animate);
        controls.update();
        renderer.render(scene, camera);
      }
      animate();
    </script>
  </body>
</html>
